#include "gpio.h"

#define GPIO_FSEL0 ((unsigned int *) 0x20200000)
#define GPIO_FSEL1 ((unsigned int *) 0x20200004)
#define GPIO_FSEL2 ((unsigned int *) 0x20200008)
#define GPIO_FSEL3 ((unsigned int *) 0x2020000c)
#define GPIO_FSEL4 ((unsigned int *) 0x20200010)
#define GPIO_FSEL5 ((unsigned int *) 0x20200014)

#define GPIO_CLR0 ((unsigned int *) 0x20200028)
#define GPIO_CLR1 ((unsigned int *) 0x2020002c)

#define GPIO_SET0 ((unsigned int *) 0x2020001c)
#define GPIO_SET1 ((unsigned int *) 0x20200020)

#define GPIO_LEV0 ((volatile unsigned int *) 0x20200034)
#define GPIO_LEV1 ((volatile unsigned int *) 0x20200038)

#define PINS_PER_FSEL_REG (int) 10
#define BITS_PER_PIN (int) 3
#define MAX_VAL_IN_3_BITS (int) 7
#define SET (int) 1
#define CLR (int) 0

void gpio_init(void) {
}

/*
 * Private helper function.
 * @return the FSEL register to modify the pin's function
 */
unsigned int* get_FSEL_loc(unsigned int pin) {
    unsigned int * loc = 0;
    if(pin >= GPIO_PIN_FIRST && pin <= GPIO_PIN9) {
        loc = GPIO_FSEL1;
    }
    else if(pin >= GPIO_PIN10 && pin <= GPIO_PIN19) {
        loc = GPIO_FSEL2;
    }
    else if(pin >= GPIO_PIN20 && pin <= GPIO_PIN29) {
        loc = GPIO_FSEL3;
    }
    else if(pin >= GPIO_PIN30 && pin <= GPIO_PIN39) { 
        loc = GPIO_FSEL4;
    }
    else if(pin >= GPIO_PIN40 && pin <= GPIO_PIN49) {
        loc = GPIO_FSEL4;
    }
    else if(pin >= GPIO_PIN50 && pin <= GPIO_PIN_LAST) {
        loc = GPIO_FSEL5; 
    }
    return loc;
}

void gpio_set_function(unsigned int pin, unsigned int function) {
    unsigned int * loc = get_FSEL_loc(pin);
    if (loc == 0) return;
    *loc |= function << ((pin % PINS_PER_FSEL_REG) * BITS_PER_PIN);
}

unsigned int gpio_get_function(unsigned int pin) {
    unsigned int * loc = get_FSEL_loc(pin);
    if (loc == 0) {
        return GPIO_INVALID_REQUEST;
    }
    unsigned int mask = MAX_VAL_IN_3_BITS << ((pin % PINS_PER_FSEL_REG) * BITS_PER_PIN);
    mask = *loc & mask;
    mask = mask >> ((pin % PINS_PER_FSEL_REG) * BITS_PER_PIN);
    return mask;
}

void gpio_set_input(unsigned int pin) {
    gpio_set_function(pin, GPIO_FUNC_INPUT);
}

void gpio_set_output(unsigned int pin) {
    gpio_set_function(pin, GPIO_FUNC_OUTPUT);
}

/*
 * Private helper function.
 * @return the LEV register of a particular pin
 */

volatile unsigned int* get_LEV_loc (unsigned int pin) {
    volatile unsigned int* loc = 0;
    if (pin >= GPIO_PIN_FIRST && pin < GPIO_PIN32) {
        loc = GPIO_LEV0;
    }
    else if (pin >= GPIO_PIN32 && pin <= GPIO_PIN_LAST) {
        loc = GPIO_LEV1;
    }
    return loc;
}

/*
 * Private helper function.
 * @return the SET register of a particular pin
 */

unsigned int* get_SET_loc (unsigned int pin) {
    unsigned int* loc = 0;
    if (pin >= GPIO_PIN_FIRST && pin < GPIO_PIN32) {
        loc = GPIO_SET0;
    }
    else if (pin >= GPIO_PIN32 && pin <= GPIO_PIN_LAST) {
        loc = GPIO_SET1;
    }
    return loc;
}

/*
 * Private helper function.
 * @return the CLR register of a particular pin
 */

unsigned int* get_CLR_loc (unsigned int pin) {
    unsigned int* loc = 0;
    if (pin >= GPIO_PIN_FIRST && pin < GPIO_PIN32) {
        loc = GPIO_CLR0;
    }
    else if (pin >= GPIO_PIN32 && pin <= GPIO_PIN_LAST) {
        loc = GPIO_CLR1;
    }
    return loc;
}
/*
void gpio_write(unsigned int pin, unsigned int value) {
    volatile unsigned* loc = get_LEV_loc(pin);
    if (loc == 0) {
        return;
    }
    if (value) {
        *loc |= (SET << (pin % 32));
        unsigned int* set_loc = get_SET_loc(pin);
        *set_loc |= (SET << (pin % 32));
    }
    else {
        unsigned int* clr_loc = get_CLR_loc(pin);
        *clr_loc |= (SET << (pin % 32));
    }
}
*/




unsigned int gpio_read(unsigned int pin) {
    volatile unsigned int* loc = get_LEV_loc(pin);
    if (loc == 0) { return GPIO_INVALID_REQUEST; }
    int is_set = ((SET << (pin % 32)) & *loc);
    return is_set >> (pin % 32);
}

