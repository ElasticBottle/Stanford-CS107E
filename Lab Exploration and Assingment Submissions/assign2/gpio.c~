#include "gpio.h"

#define GPIO_FSEL0 ((unsigned int *) 0x20200000)
#define GPIO_FSEL1 ((unsigned int *) 0x20200004)
#define GPIO_FSEL2 ((unsigned int *) 0x20200008)
#define GPIO_FSEL3 ((unsigned int *) 0x2020000c)
#define GPIO_FSEL4 ((unsigned int *) 0x20200010)
#define GPIO_FSEL5 ((unsigned int *) 0x20200014)

#define GPIO_CLR0 ((volatile unsigned int *) 0x20200028)
#define GPIO_CLR1 ((unsigned int *) 0x2020002c)

#define GPIO_SET0 ((volatile unsigned int *) 0x2020001c)
#define GPIO_SET1 ((unsigned int *) 0x20200020)

#define GPIO_LEV0 ((volatile unsigned int *) 0x20200034)
#define GPIO_LEV1 ((volatile unsigned int *) 0x20200038)

#define PINS_PER_FSEL_REG (int) 10
#define BITS_PER_PIN (int) 3
#define MAX_VAL_IN_3_BITS (int) 7
#define SET (int) 1
#define CLR (int) 0
#define BYTEDIFF 4


void gpio_init(void) {
}

/*
 * Private helper function.
 * @return the FSEL register to modify the pin's function
 */
unsigned int* get_FSEL_loc(unsigned int pin) {
    unsigned int * loc = 0;
    if(pin >= GPIO_PIN_FIRST && pin <= GPIO_PIN9) {
        loc = GPIO_FSEL1;
    }
    else if(pin >= GPIO_PIN10 && pin <= GPIO_PIN19) {
        loc = GPIO_FSEL2;
    }
    else if(pin >= GPIO_PIN20 && pin <= GPIO_PIN29) {
        loc = GPIO_FSEL3;
    }
    else if(pin >= GPIO_PIN30 && pin <= GPIO_PIN39) { 
        loc = GPIO_FSEL4;
    }
    else if(pin >= GPIO_PIN40 && pin <= GPIO_PIN49) {
        loc = GPIO_FSEL4;
    }
    else if(pin >= GPIO_PIN50 && pin <= GPIO_PIN_LAST) {
        loc = GPIO_FSEL5; 
    }
    return loc;
}

void gpio_set_function(unsigned int pin, unsigned int function) {
    unsigned int * loc = get_FSEL_loc(pin);
    if (loc == 0) return;
    int shift_amount = (pin % PINS_PER_FSEL_REG) * BITS_PER_PIN;
    *loc &= ~(MAX_VAL_IN_3_BITS << shift_amount); 
    *loc |= function << shift_amount;
}

unsigned int gpio_get_function(unsigned int pin) {
    unsigned int * loc = get_FSEL_loc(pin);
    if (loc == 0) { return GPIO_INVALID_REQUEST; }
    int shift_amount = (pin % PINS_PER_FSEL_REG) * BITS_PER_PIN;
    unsigned int mask = MAX_VAL_IN_3_BITS << shift_amount;
    mask = *loc & mask;
    mask >>= shift_amount;
    return mask;
}

void gpio_set_input(unsigned int pin) {
    gpio_set_function(pin, GPIO_FUNC_INPUT);
}

void gpio_set_output(unsigned int pin) {
    gpio_set_function(pin, GPIO_FUNC_OUTPUT);
}

void gpio_output(unsigned int pin, unsigned int value) {
    if (pin > GPIO_PIN_LAST) { return; }
    volatile unsigned int* setting_loc;
    if (value) {
        setting_loc = GPIO_SET0 + (pin / 32);
    }
    else {
        setting_loc = GPIO_CLR0 + (pin / 32);
    }
    *setting_loc = *setting_loc & (1 << (pin % 32));
}

void gpio_write (unsigned int gpio, unsigned int on) 
{
	if (gpio < GPIO_PIN_LAST) 		// Check GPIO pin number valid
	{
		volatile unsigned int * p;
		unsigned int bit = 1 << (gpio % 32);		// Create mask bit
		p = (on) ? GPIO_SET0: GPIO_CLR0;	// Set pointer depending on on/off state
		p += (gpio / 32);		// Output bit to register number	
		*p = bit;	
	}
}

unsigned int gpio_input(unsigned int pin) {
    if (pin > GPIO_PIN_LAST) { 
        return GPIO_INVALID_REQUEST; 
    }
    volatile unsigned int* loc = GPIO_LEV0 + (pin / 32);
    unsigned int is_set = (SET << (pin % 32)) & *loc;
    return is_set >> (pin % 32);
}

int gpio_read (unsigned int gpio) 
{
	if (gpio < GPIO_PIN_LAST)		// Check GPIO pin number valid
	{
		unsigned int bit = 1 << (gpio % 32);		// Create mask bit
		volatile unsigned int * mem = GPIO_LEV0;
		mem += (gpio / 32);
		if (*mem & bit) { return 1;}
		else { return 0; }	// Return true if bit set
	}
	return GPIO_INVALID_REQUEST;	// Return false
}

